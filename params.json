{"name":"Scala workshop","body":"# Förberedelser\r\n\r\nWorkshopen kommer att bestå till stor del av praktiska övningar. Det är därför viktigt att alla som vill delta i workshopen ska förbereda sina utvecklingsmiljöer enligt följande instruktioner:\r\n\r\n* Installera [Scala] \r\n* Installera [sbt] \r\n* Installera [Eclipse] eller [Intellij] \r\n* Installera [Scala IDE för Eclipse] eller [Scala plugin för Intellij] (helst via plugin manager i IDE:n)\r\n* Hämta filen [build.sbt] och lägg den på sökvägen `<hemkatalogen>/.sbt/plugins/` (skapa katalogen om den inte redan finns)\r\n* Installera [Git] \r\n\r\nOm man vill kunna köra sbt i Ecllipse eller Intellij så kan man:\r\n* Installera [idea-sbt plugin] för Intellij\r\n* Följa instruktionerna för att [köra sbt i terminalfönstret] i Eclipse  \r\n\r\n***\r\n\r\n# Q&A\r\n**Vad behöver jag göra för att kunna köra `scala` och `scalac`?**  \r\nLägg till bin katalogen i din Scalainstallation i miljövariabeln PATH \r\n\r\n**Hur installerar man sbt?**  \r\nFölj [installationsinstruktionerna]\r\n\r\n**Hur skapar man ett Scalaprojekt i Eclipse?**  \r\nVälj **File** - **New** - **Other** - **Scala Wizards** - **Scala Project**\r\n\r\n**Hur skapar man ett Scalaprojekt i Intellij?**  \r\nVälj **File** - **New Project** - **Create project from scrach**  \r\nVälj **Next**  \r\nVälj **Java Module** och fyll i namn osv.  \r\nVälj **Next**  \r\nVälj **Create source directory**  \r\nVälj **Next**  \r\nKlicka i checkboxen **Scala**. Under **Use Scala Distribution** välj den katalog där du installerade Scala  \r\nVälj **Finish**  \r\n\r\n**Hur kör man `javap`?**  \r\nI terminalfönstret, gå till katalogen där du skapat filen med klassen du vill undersöka  \r\nkompilera klassen mha `scalac`, t ex: `scalac animals.scala`  \r\nkör `javap` på klassen du kompilerat, t ex: `javap Cat`  \r\n\r\n***\r\n\r\n# Övningar\r\n\r\nLösningarna på följande övningar kan man ladda ner och öppna i IDE:n, genom att: \r\n* I terminalfönstret, skriv: `git clone git://github.com/uzilan/scalaworkshop.git`\r\n* Skriv `cd scalaworkshop` \r\n* Om du använder Eclipse, skriv `sbt eclipse`. För Intellij, skriv `sbt gen-idea`\r\n* Öppna den nerladdade projektet i Eclipse eller Intellij\r\n\r\n### Scala REPL\r\n\r\n* Använd REPL:en för att skapa olika variabler (både automatiska och namngivna) och kombinera dem med varandra\r\n* När kan man använda autocomplete i REPL:en?\r\n* Skapa ett \"Hello World\" meddelande mha två variabler  \r\n* Givet att `val tjo = \"tjohej\"`, vad händer om man skriver `tjo * 10`?  \r\n\r\n### Classes & objects\r\n\r\n* Skapa en **class Fraction** med attribut **num** och **denom** i konstruktorn. \r\n* Överlagra metoden **toString** i klassen\r\n* Skapa ett **object Fraction** i samma fil\r\n* Skapa en **apply** factorymetod i objektet som skapar en instans av Factoryklassen\r\n* Skapa en **implicit converter** som omvandlar **Int** till **Fraction** i objektet\r\n* Skapa ett **objekt Fractions** som ärver från **App** och som testar skapa Fractions med och utan new samt omvandlar **Int**ar till **Fraction**s. \r\n\r\n### Case classes\r\n\r\n* Skapa en **case class Person** med några lämpliga attribut i konstruktorn och använd sedan **javap** för att inspektera vilka metoder den har\r\n* Hur många rader kod skulle det krävas för att skriva motsvarande klass i Java? :) \r\n\r\n### Scaladoc\r\n\r\n* När man skapar en **List** i Scala får man en förvald immutable lista. Vilket packet finns den definerad i? Var kan man hitta en mutable lista?\r\n* I scaladoc kan man hitta klasserna **Tuple1** och **Tuple2**. Finns det fler Tuples? Hur många?\r\n* Varför finns inte klassen **String** i Scaladoc? Var finns alla metoder i **String**?\r\n\r\n### Traits & Mixins\r\n\r\n* Skapa en **trait Touchscreen** med ett attribute **touchscreen: String** med ett lämpligt värde\r\n* Skapa en **trait Apple** med ett attribute **apple: String** med ett lämpligt värde\r\n* Skapa en **abstract class Thing** med ett attribute **stuff: List[String]** och en metod som skriver ut innehållet i listan (använd **List.mkString**)\r\n* Skapa en **class Android** som ärver från **Thing** och mixar **Touchscreen** och som lägger till **touchscreen** i **stuff**\r\n* Skapa en **class IPhone** som ärver från **Thing** och mixar **Touchscreen** och **Apple** och som lägger till **touchscreen** och **apple** i **stuff**\r\n* Skapa ett **object Things** som ärver från **App**, och som skriver ut innehållet i en **Android** och en **IPhone**\r\n\r\n### Functions\r\n\r\n* Skapa en **case class User** med för- och efternamn som argument\r\n* Skapa ett **object User** med följande hjälpfunktioner:\r\n * **doWithUser** tar en **User** och en funktion som tar **User** och returnerar en **String** och appliceras på **User**n. Funktionen ska returnera en **String** \r\n * **fullName** tar en **User** och returnerar hans fullständiga namn\r\n * **userFullName** tar en **User** och anropar **doWithUser** med **User**n och funktionen **fullName** som argument\r\n * **scrambleName** tar en **User** och returnerar hans namn med blandade bokstäver. (Titta på **scala.util.Random** för lämplig funktion)  \r\n* Skapa ett program som:\r\n * importerar metoderna i objektet User mha koden `import User._`\r\n * skapar en **User** kalle\r\n * anropar och skriver ut resultatet av **userFullName** med kalle\r\n * anropar och skriver ut resultatet av **doWithPerson** med kalle och **scrambleName** som argument\r\n\r\n### Loops\r\n\r\n* Skriv ett program som skriver ut multiplikationstabellen\r\n* Skriv en for loop som tar en lista med förkortningar av veckodagarna (Mon, Tis, Ons, ...) och skapar en lista med fullständiga namn mha **for** och **yield**\r\n* Skriv ut, mha en for loop, vart tredje ord ur meningen:\r\n\"I have never thought I'm gonna need to give blood again. You saw me up there, right?\" \r\n\r\n### Recursion\r\n\r\n* Skriv ett program som rekursivt skriver ut namn på filerna under en given katalog\r\n* Skriv ett program som vänder på en lista rekursivt\r\n\r\n### sbt\r\n\r\n* I terminalfönstret, skapa en katalog \"sbttest\"\r\n* byt till katalogen genom att köra `cd sbttest`\r\n* starta sbt REPL genom att köra `sbt`\r\n* skriv `set name := \"sbttest\"`\r\n* skriv `set organization := \"diversify.se\"`\r\n* skriv `session save`\r\n* skriv `eclipse with-source=true` (även om du tänker köra intellij, annars skapas inte katalogstrukturen)\r\n* skriv `gen-idea` (bara om du tänker köra intellij)\r\n* skriv `test`\r\n* öppna projektet i eclipse/intellij\r\n\r\nVoila! nu har du skapat ett sbt projekt med katalogstruktur, färdig att öppnas som projekt i eclipse eller intellij.\r\n\r\n### Test\r\n\r\n* Skapa ett sbt projekt\r\n* Lägg till support för specs2 och junit genom att skriva följande efter en tom rad (viktigt!) i build.sbt:\r\n\r\n`\r\nlibraryDependencies ++= Seq(\r\n  \"org.specs2\" %% \"specs2\" % \"1.7.1\" % \"test\",\r\n  \"junit\" % \"junit\" % \"4.8.2\" % \"test\"\r\n)\r\n`\r\n* Skapa en **trait Shape** med metoder **area: Double** och **perimeter: Double**\r\n* Skapa **case class Square** och **case class Circle** som implementerar **Shape** och räknar ut sina area respektive omkrets\r\n* Skriv tester för klasserna **Square** och **Circle** \r\n\r\n### Trollcount\r\n\r\nDen sista övningen heter Trollcount och är lite mer complex. Övningen kan göras på olika sätt, beroende på hur säker man känner sig på Scala. Gör följande för att börja med övningen:\r\n\r\n* Läs om Trollcount på http://codebyexample.info/2012/04/24/trollcount-count-like-a-troll/\r\n* Hämta övningen: `git clone git://github.com/uzilan/trollcount.git`\r\n* Kör `cd trollcount`\r\n* Välj vilken branch man vill jobba i genom att köra `git checkout <branchnamn>`:\r\n * **tests-only** - innehåller endast tester - Välj den branchen om du vill implementera hela logiken själv.\r\n * **tests-and-stubs** - innehåller tester och stubbar - välj den branchen om du vill ha hjälp med att börja implementera lösningen. \r\n * **master** - den fullständiga lösningen. Välj den branchen om du vill gå igenom min lösning.\r\n* Kör `sbt ~test` för att börja testa applikationen\r\n* Implementera!\r\n\r\nÖvningen går på att få lösningen att kompilera och testerna att vara gröna. \r\n\r\n***\r\n\r\n# Presentationen\r\n\r\nVill man se presentationen kan man hitta den på: http://prezi.com/toe9moenyluk/scala-workshop-diversify/\r\n\r\n\r\n[Scala]: http://www.scala-lang.org/downloads\r\n[sbt]: https://github.com/harrah/xsbt/wiki/Getting-Started-Setup\r\n[Git]: http://git-scm.com/download\r\n[Eclipse]: http://www.eclipse.org/downloads/\r\n[Intellij]: http://www.jetbrains.com/idea/download/\r\n[Scala IDE för Eclipse]: http://www.scala-ide.org/\r\n[Scala plugin för Intellij]: http://plugins.intellij.net/plugin/?=&id=1347\r\n[idea-sbt plugin]: https://github.com/orfjackal/idea-sbt-plugin/wiki\r\n[köra sbt i terminalfönstret]: http://richard.dallaway.com/sbt-terminal-in-eclipse\r\n[build.sbt]: https://github.com/downloads/uzilan/scalaworkshop/build.sbt\r\n[installationsinstruktionerna]: https://github.com/harrah/xsbt/wiki/Getting-Started-Setup","tagline":"Förberedelser, Q&A och övningar för Scala workshopen","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}