{"name":"Scala Workshop","tagline":"Preparations, Q&A and exercises for the Scala workshop","body":"# Preparations\r\n\r\nThis workshop mainly consists of practical exercises. It is therefore important that all it's attendees will prepare their development environments according to the following instructions:  \r\n\r\n* Install [Scala] \r\n* Install [sbt] \r\n* Install [Eclipse] eller [Intellij] \r\n* Install [Scala IDE for Eclipse] or [Scala plugin for Intellij] (preferably using the plugin manager in the IDE)\r\n* Fetch the [build.sbt] file and add it in your `<home>/.sbt/0.13/plugins/` path (create the folder if it is missing)\r\n* Install [Git] \r\n\r\nIf you want to run sbt inside Ecllipse or Intellij:\r\n* Install [idea-sbt plugin] for Intellij\r\n* Follow the instruktions in [run sbt inside eclipse] i Eclipse  \r\n\r\n***\r\n\r\n# Q&A\r\n\r\n**What do I need to do to be able to run `scala`and `scalac`?**\r\n* Add your scala/bin folder to your PATH environment variable\r\n\r\n**How do I install sbt?**\r\n* Follow the [sbt installation instructions]\r\n\r\n**How do I create a Scala project in Eclipse?**  \r\n* Choose **File** - **New** - **Other** - **Scala Wizards** - **Scala Project**\r\n\r\n**How to create a Scala project in Intellij?**\r\n* Choose **File** - **New Project** - **Create project from scrach**  \r\n* Choose **Next**  \r\n* Choose **Java Module** and add a name etc.\r\n* Choose **Next**  \r\n* Choose **Create source directory**  \r\n* Choose **Next**  \r\n* Click in the **Scala** checkbox. Under **Use Scala Distribution**,  choose your Scala installation folder\r\n* Choose **Finish**  \r\n\r\n**How do I run `javap`?**\r\n* In the terminal, go to the folder containing the file you want to investigate. \r\n* Compile it using the `scalac`command, e.g. `scalac animals.scala`\r\n* run `scalap`on the class you compiled, e.g. `scalap Cat`\r\n\r\n***\r\n\r\n# Exercises\r\n\r\nSolutions to the following exercises can be downloaded and opened in your IDE using the following instructions:\r\n* In the terminal, write: `git clone git://github.com/uzilan/scalaworkshop.git`\r\n* write `cd scalaworkshop`\r\n* If you use Eclipse, write `sbt eclipse`. For Intellij, write `sbt gen-idea`\r\n* Open the newly created project in your IDE.\r\n\r\n### Scala REPL\r\n\r\n* Use the REPL to create different variables (both anonymous and named) and combine them with each other\r\n* When can one use autocomplete in the REPL?\r\n* Create a \"Hello World\" message using two variables\r\n* Given that `val foo = \"bar\"`, what would happen if you run `foo * 10`?\r\n\r\n### Classes & Objects\r\n\r\n* Create a **class Fraction** with attributes **num** and **denom** in the constructor\r\n* Override method **toString** inside the class\r\n* Create an **object Fraction** in the same file\r\n* Create an **Apply** factory method inside the object, which creates instances of the Fraction class.\r\n* Create an **implicit converter** which converts **Int** to **Fraction** instances inside the object\r\n* Create an  **object Fractions** which inherits from **App**, which tests creating Fractions with and without **new**, as well as converting **Int**s into **Fraction**s \r\n\r\n### Case Classes\r\n\r\n* Create a **case class Person** using adequate attributes in the constructor. \r\n* Use the **javap** command to inspect which methods it contains\r\n* How much code would you expect a similar Java implementation would require? :) \r\n\r\n### Scaladoc\r\n\r\n* When creating a **List** in Scala, the default implementation is an immutable list. In which package is it defined? Where can one find a mutable list?\r\n* In Scaladoc there are definitions for classes **Tuple1** and **Tuple2**. Are there more Tuples? How many?\r\n* Why can't we find the **String** class definition in Scaladoc? Where can we find the methods in **String**?\r\n\r\n### Traits & Mixins\r\n\r\n* Create a **trait Touchscreen** with attribute **touchscreen: String** with value \"a touchscreen\"\r\n* Create a **trait Apple** with attribute **apple: String** with value \"an Apple\"\r\n* Create an **abstract class Thing** with an attribute **stuff: List[[String]]()** and a method that writes the contents of the list (use the **List.mkString** method)\r\n* Create a **class Android** that inherits from **Thing** and mixes **Touchscreen**, and adds **touchscreen** to **stuff**\r\n* Create a **class IPhone** that inherits from **Thing** and mixes **Touchscreen** and **Apple**, and adds **touchscreen** and **apple** to **stuff**\r\n* Create an **object things** that inherits from **App**, which prints the contents in an **Android** and an **IPhone** instances\r\n\r\n### Functions\r\n\r\n* Create a **case class User** with given name and a sirname as arguments\r\n* Create an **object User** with the following help functions:\r\n * **doWithUser** takes a **User** and a function that takes a **User** as argument and returns a **String**. The function should return a **String** \r\n * **fullName** takes a **User** and returns it's full name\r\n * **userFullName** takes a **User** as argument and calls **doWithUser** with the **User** and the **fullName** function and returns the result\r\n * **scrambleName** takes a **User** as argument and returns it's name with mixed letters. (Take a look at **scala.util.Random**)\r\n* Create a program that:\r\n * Imports the methods in object **User** using `import User._`\r\n * Creates a **User** Bertil\r\n * Calls and prints the result of calling **userFullName** with Bertil as argument\r\n * Calls and prints the result of calling **doWithPerson** with Bertil and **scrambleName** as arguments\r\n\r\n### Loops\r\n\r\n* Create a program that prints the multiplication table\r\n* Create a for loop that takes a list with weekdays in short format (Sun, Mon, Tues, ...) and creates a list with complete weekday names (Sunday, Monday, Tuesday, ...) using **for** and **yield**\r\n* Using a for loop, print every third word in the string:\r\n\"I have never thought I'm gonna need to give blood again. You saw me up there, right?\" \r\n\r\n### Recursion\r\n\r\n* Create a program which prints the names of the files in a given folder, recursively\r\n* Create a program that reverses a list recursively\r\n\r\n### sbt\r\n\r\n* In the terminal, create a folder named \"sbttest\"\r\n* Change directory to the folder by running `cd sbttest`\r\n* Start the sbt REPL by running `sbt`\r\n* Write `set name := \"sbttest\"`\r\n* Write `set organization := \"webstep.no\"`\r\n* Write `session save`\r\n* Write `eclipse with-source=true` (even if you are running intellij, otherwise no folder structure will be created)\r\n* Write `gen-idea` (only if you run intellij)\r\n* Write `test`\r\n* Open the project in your IDE\r\n\r\nVoila! You have now created an sbt project with folder structure which can be opened in your IDE.\r\n\r\n### Test\r\n\r\n* Create a new sbt project\r\n* Add support for specs2 and junit by adding the following after an empty row (note: important! After an empty row!) in your build.sbt file.\r\n\r\n```\r\nlibraryDependencies ++= Seq(\r\n  \"org.specs2\" %% \"specs2\" % \"2.3.3\" % \"test\",\r\n  \"junit\" % \"junit\" % \"4.8.2\" % \"test\"\r\n)\r\n```\r\n\r\n* Create a **trait Shape** with method **area: Double** and **perimeter: Double**\r\n* Create a **case class Square** and a **case class Circle** which implements **Shape** and it's methods\r\n* Create tests for classes **Square** and **Circle**\r\n\r\n### Trollcount\r\n\r\nThe last exercise is a bit more complex. The exercise can be completed in various ways, depending on how well you feel you understand Scala. Follow these instructions to begin:\r\n\r\n* Read about Trollcount at http://codebyexample.info/2012/04/24/trollcount-count-like-a-troll/\r\n* Fetch the exercise: `git clone git://github.com/uzilan/trollcount.git`\r\n* Choose which branch to work with by writing `git checkout <branchnamn>`:\r\n * **tests-only** - only contains tests and no implementations. Choose this branch if you want to implement the program yourself.\r\n * **tests-and-stubs** - contains tests and stubs. Choose this branch if you need help beginning the implementation.\r\n * **master** - the complete solution. Choose this branch if you want go through the solution.\r\n* Run `sbt ~test` to begin testing the implementation\r\n* Implement!\r\n\r\nThe exercise's goal is to see to that all tests become green.\r\n \r\n***\r\n\r\n# Presentationen\r\n\r\nThe presentation is available here: [presentation]\r\n\r\n[Scala]: http://www.scala-lang.org/downloads\r\n[sbt]: http://www.scala-sbt.org/\r\n[Git]: http://git-scm.com/download\r\n[Eclipse]: http://www.eclipse.org/downloads/\r\n[Intellij]: http://www.jetbrains.com/idea/download/\r\n[Scala IDE for Eclipse]: http://www.scala-ide.org/\r\n[Scala plugin f√∂r Intellij]: http://plugins.intellij.net/plugin/?=&id=1347\r\n[idea-sbt plugin]: https://github.com/orfjackal/idea-sbt-plugin/wiki\r\n[run sbt inside eclipse]: http://richard.dallaway.com/sbt-terminal-in-eclipse\r\n[build.sbt]: https://raw.github.com/uzilan/scalaworkshop/master/build.sbt\r\n[sbt installation instructions]: http://www.scala-sbt.org/release/docs/Getting-Started/Setup\r\n[presentation]: http://prezi.com/toe9moenyluk/scala-workshop-diversify/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}